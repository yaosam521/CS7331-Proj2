cases_map <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = confirmed_cases_P1000)) +
coord_quickmap() +
scale_fill_continuous(type = "viridis") +
labs(title = "Cases in Ohio State", fill = "Cases per 1000")
cowplot::plot_grid(deaths_map, cases_map, nrow = 1, ncol = 2)
rm(cases_map, deaths_map)
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
summary(subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
summary(subset02_to_cluster)
# 2. perform a PCA analysis and remove outliers ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# a- subset 01:
PCA <- subset01_to_cluster %>% select(-county_name) %>% prcomp()
PCA <- as_tibble(PCA$x)  %>% add_column(county_name = cases_cleaned$county_name)
lof <- lof(as_tibble(PCA$PC1,PCA$PC2), minPts= 10)
ggplot(PCA %>% add_column(lof = lof), aes(PC1, PC2, color = lof)) +
geom_point() + scale_color_gradient(low = "gray", high = "red")+
geom_text_repel(aes(label = county_name), vjust = -1)
ggplot(PCA %>% add_column(outlier = lof >= 5), aes(PC1, PC2, color = outlier)) +
geom_point()+
geom_text_repel(aes(label = county_name), vjust = -1)
subset01_to_cluster <- subset01_to_cluster %>% filter(lof < 5)
# b- subset 02:
PCA <- subset02_to_cluster %>% select(-county_name) %>% prcomp()
PCA <- as_tibble(PCA$x)  %>% add_column(county_name = cases_cleaned$county_name)
lof <- lof(as_tibble(PCA$PC1,PCA$PC2), minPts= 10)
ggplot(PCA %>% add_column(lof = lof), aes(PC1, PC2, color = lof)) +
geom_point() + scale_color_gradient(low = "gray", high = "red")+
geom_text_repel(aes(label = county_name), vjust = -1)
ggplot(PCA %>% add_column(outlier = lof >= 1.75), aes(PC1, PC2, color = outlier)) +
geom_point()+
geom_text_repel(aes(label = county_name), vjust = -1)
subset02_to_cluster <- subset02_to_cluster %>% filter(lof < 1.75)
rm(PCA, lof)
# 1- find the number of clusters
# A- Subset 01:
# A-1-1 Elbow Method: Within-Cluster Sum of Squares
set.seed(1234)
ks <- 2:10
WCSS <- sapply(ks, FUN = function(k) {
kmeans(subset01_to_cluster %>% select(-county_name), centers = k, nstart = 1000)$tot.withinss
})
WCSS_viz <- ggplot(as_tibble(ks, WCSS), aes(ks, WCSS)) + geom_line() +
geom_vline(xintercept = 8, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
# A-1-2 Average Silhouette Width
d <- dist(subset01_to_cluster %>% select(-county_name))
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, kmeans(subset01_to_cluster %>% select(-county_name), centers=k, nstart = 1000)$cluster)$avg.silwidth
})
ASW_viz <- ggplot(as_tibble(ks, ASW), aes(ks, ASW)) + geom_line() +
geom_vline(xintercept = 8, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
cowplot::plot_grid(WCSS_viz, ASW_viz, nrow = 1, ncol = 2)
k01=7
km01=kmeans(subset01_to_cluster %>% select(-county_name), centers = k01, nstart = 1000)
# B- Subset 02:
# B-1-1 Elbow Method: Within-Cluster Sum of Squares
set.seed(1234)
ks <- 2:20
WCSS <- sapply(ks, FUN = function(k) {
kmeans(subset02_to_cluster %>% select(-county_name), centers = k, nstart = 1000)$tot.withinss
})
WCSS_viz <- ggplot(as_tibble(ks, WCSS), aes(ks, WCSS)) + geom_line() +
geom_vline(xintercept = 9, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
# A-1-2 Average Silhouette Width
d <- dist(subset02_to_cluster %>% select(-county_name))
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, kmeans(subset02_to_cluster %>% select(-county_name), centers=k, nstart = 1000)$cluster)$avg.silwidth
})
ASW_viz <- ggplot(as_tibble(ks, ASW), aes(ks, ASW)) + geom_line() +
geom_vline(xintercept = 9, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
cowplot::plot_grid(WCSS_viz, ASW_viz, nrow = 1, ncol = 2)
k02=9
km02=kmeans(subset02_to_cluster %>% select(-county_name), centers = k02, nstart = 1000)
# displaying details of the cluster:
ggplot(pivot_longer(as_tibble(km01$centers,  rownames = "cluster"),
cols = colnames(km01$centers)),
aes(y = name, x = value)) +
geom_bar(stat = "identity") +
facet_grid(rows = vars(cluster))
ggplot(pivot_longer(as_tibble(km02$centers,  rownames = "cluster"),
cols = colnames(km02$centers)),
aes(y = name, x = value)) +
geom_bar(stat = "identity") +
facet_grid(rows = vars(cluster))
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
cases_OH <- subset01_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(km01$cluster)))
km01_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Clusters", subtitle = "Kmeans [Subset 01]")
cases_OH <- subset02_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(km02$cluster)))
km02_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Clusters", subtitle = "Kmeans [Subset 02]")
cowplot::plot_grid(km01_viz, km02_viz, nrow = 1, ncol = 2)
## Step 1: Add Outliers Back in. We don't need to account for outliers in Hierarchical Clustering
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset01_to_cluster <- as.data.frame(subset01_to_cluster)
rownames(df_subset01_to_cluster) <- df_subset01_to_cluster$county_name
df_subset01_to_cluster <- df_subset01_to_cluster[,1:9]
head(df_subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset02_to_cluster <- as.data.frame(subset02_to_cluster)
rownames(df_subset02_to_cluster) <- df_subset02_to_cluster$county_name
df_subset02_to_cluster <- df_subset02_to_cluster[,1:6]
head(df_subset02_to_cluster)
#Step 2: Perform the Clusters --------------------------------------------------
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
ggdendrogram(hc_1_complete,
rotate = TRUE,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Complete - Subset 01")
d_h_2 <- dist(df_subset02_to_cluster)
hc_2_complete <- hclust(d_h_2, method='complete')
ggdendrogram(hc_2_complete,
rotate = TRUE,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Complete - Subset 02")
# Ward's Method
d_h_ward <- dist(df_subset01_to_cluster)
hc_1_wards <- hclust(d_h, method='ward.D2')
ggdendrogram(hc_1_wards,
rotate = TRUE,
size = 4,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Ward's - Subset 01")
d_h_2_ward <- dist(df_subset02_to_cluster)
hc_2_wards <- hclust(d_h_2, method='ward.D2')
ggdendrogram(hc_2_wards,
rotate = TRUE,
size = 4,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Ward's - Subset 02")
# Decided on NbClust
hclust <- NbClust(data=df_subset01_to_cluster,method="complete",index="silhouette")
print(hclust$Best.nc)
hclust <- NbClust(data=df_subset02_to_cluster,method="complete",index="silhouette")
print(hclust$Best.nc)
hclust <- NbClust(data=df_subset01_to_cluster,method="ward.D2",index="silhouette")
print(hclust$Best.nc)
hclust <- NbClust(data=df_subset02_to_cluster,method="ward.D2",index="silhouette")
print(hclust$Best.nc)
library(factoextra)
p <- fviz_dend(hc_1_complete,k=2,rotate = TRUE, main ="Hierarchical, Complete, Subset 1")
p$layers[[2]]$data$angle <- 0
p
p <- fviz_dend(hc_2_complete,k=3,rotate = TRUE, main ="Hierarchical, Complete, Subset 2")
p$layers[[2]]$data$angle <- 0
p
p <- fviz_dend(hc_1_wards,k=2,rotate = TRUE, main ="Hierarchical, Wards, Subset 1")
p$layers[[2]]$data$angle <- 0
p
p <- fviz_dend(hc_2_wards,k=3,rotate = TRUE, main ="Hierarchical, Wards, Subset 2")
p$layers[[2]]$data$angle <- 0
p
df_subset01_to_cluster <- df_subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
cases_OH <- df_subset01_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
#Subset 1
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
clusters <- cutree(hc_1_complete, k = 2)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc01_c_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Complete [Subset 01]")
#Subset 2
clusters <- cutree(hc_2_complete, k = 3)
df_subset02_to_cluster <- df_subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc02_c_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Complete [Subset 02]")
cowplot::plot_grid(hc01_c_viz, hc02_c_viz, nrow = 1, ncol = 2)
#Plotting Ward's Method --------------------------------------------------------
#Subset 01
clusters <- cutree(hc_1_wards, k = 2)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc01_w_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Ward's [Subset 01]")
clusters <- cutree(hc_2_wards, k = 3)
#Subset 2
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc02_w_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Ward's [Subset 02]")
cowplot::plot_grid(hc01_w_viz, hc02_w_viz, nrow = 1, ncol = 2)
#Visualizing the Distances
library(seriation)
#Distance Matrices
dissplot(d_h, labels = hc_1_complete$cluster, options=list(main="Complete 01"))
dissplot(d_h_2, labels = hc_2_complete$cluster, options=list(main="Complete 02"))
dissplot(d_h_ward, labels = hc_1_wards$cluster, options=list(main="Ward's Method 01"))
dissplot(d_h_2_ward, labels = hc_2_wards$cluster, options=list(main="Ward's Method 02"))
library(cluster)
#Silhouette Plot for Hierarchical
fviz_silhouette(silhouette(cutree(hc_1_complete, k = 2), d_h), main = "Complete 01")
fviz_silhouette(silhouette(cutree(hc_2_complete, k = 3), d_h_2), main = "Complete 02")
fviz_silhouette(silhouette(cutree(hc_1_wards, k = 2), d_h_ward), main = "Ward's Method 01")
fviz_silhouette(silhouette(cutree(hc_2_wards, k = 3), d_h_2_ward), main = "Ward's Method 02")
# Step 4: DBSCAN ---------------------------------------------------------------
library(dbscan)
#for the KNN Graph, I am choosing k=1 because I want each cluster to have a minimum points of 2
knn_01 <- kNNdistplot(subset01_to_cluster[,1:9],k=1)
abline(h = 2.7, col = "red")
knn_02 <- kNNdistplot(subset02_to_cluster[,1:6],k=1)
abline(h = 1.8, col = "red")
db01 <- dbscan(subset01_to_cluster[,1:9],eps=2.7,minPts = 2)
db02 <- dbscan(subset02_to_cluster[,1:6],eps=1.8,minPts=2)
#Map Subset 1 Cluster
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(db01$cluster)))
db01_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "DB Scan", subtitle = "Subset 01")
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(db02$cluster)))
db02_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "DB Scan", subtitle = "Subset 02")
cowplot::plot_grid(db01_viz, db02_viz, nrow = 1, ncol = 2)
# Part 05: External Validation -------------------------------------------------
ground_truth <- cases_cleaned %>% select(confirmed_cases_P1000, deaths_P1000)
entropy <- function(cluster, truth) {
k <- max(cluster, truth)
cluster <- factor(cluster, levels = 1:k)
truth <- factor(truth, levels = 1:k)
w <- table(cluster)/length(cluster)
cnts <- sapply(split(truth, cluster), table)
p <- sweep(cnts, 1, rowSums(cnts), "/")
p[is.nan(p)] <- 0
e <- -p * log(p, 2)
sum(w * rowSums(e, na.rm = TRUE))
}
purity <- function(cluster, truth) {
k <- max(cluster, truth)
cluster <- factor(cluster, levels = 1:k)
truth <- factor(truth, levels = 1:k)
w <- table(cluster)/length(cluster)
cnts <- sapply(split(truth, cluster), table)
p <- sweep(cnts, 1, rowSums(cnts), "/")
p[is.nan(p)] <- 0
sum(w * apply(p, 1, max))
}
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(dist(subset01_to_cluster %>% select(-county_name)),
km01$cluster,
ground_truth,
compareonly = TRUE)),
entropy = entropy(km01$cluster, ground_truth),
purity = purity(km01$cluster, ground_truth)
)
)
d_km01 <- dist(subset01_to_cluster %>% select(-county_name))
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth,
compareonly = TRUE)),
entropy = entropy(km01$cluster, ground_truth),
purity = purity(km01$cluster, ground_truth)
)
)
print(km01$cluster)
print(length(d_km01))
print(length(km01$cluster))
print(length(ground_truth))
# Part 05: External Validation -------------------------------------------------
ground_truth <- cases_cleaned %>% select(confirmed_cases_P1000)
print(length(d_km01))
print(length(km01$cluster))
print(length(ground_truth))
print(ground_truth)
print(d_km01)
print(length(km01$cluster))
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth,
compareonly = TRUE)),
entropy = entropy(km01$cluster, ground_truth),
purity = purity(km01$cluster, ground_truth)
)
)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth,
compareonly = TRUE))#,
#entropy = entropy(km01$cluster, ground_truth),
#purity = purity(km01$cluster, ground_truth)
)
)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth,
compareonly = TRUE))#,
#entropy = entropy(km01$cluster, ground_truth),
#purity = purity(km01$cluster, ground_truth)
)
)
print(d_km01)
print(length(km01$cluster))
print(ground_truth)
ground_truth_km01 <- ground_truth %>% select(-"Noble County")
ground_truth_km01 <- ground_truth %>% filter(-"Noble County")
ground_truth_km01 <- ground_truth %>% filter(count_name == "Noble County")
ground_truth_km01 <- ground_truth %>% filter(county_name == "Noble County")
ground_truth_km01 <- ground_truth %>% filter(county_name == "Noble")
print(ground_truth)
ground_truth_km01 <- cases_cleaned %>% select(confirmed_cases_P1000,county_name != "Noble County")
ground_truth_km01 <- ground_truth_km01 %>% filter(count_name != "Noble County")
ground_truth_km01 <- cases_cleaned %>% select(confirmed_cases_P1000,county_name)
ground_truth_km01 <- ground_truth_km01 %>% filter(count_name != "Noble County")
ground_truth_km01 <- ground_truth_km01 %>% filter(county_name != "Noble County")
d_km01 <- dist(subset01_to_cluster %>% select(-county_name))
print(d_km01)
print(length(km01$cluster))
print(ground_truth)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE))#,
entropy = entropy(km01$cluster, ground_truth),
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE)),
entropy = entropy(km01$cluster, ground_truth),
purity = purity(km01$cluster, ground_truth)
)
)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE)),
entropy = entropy(km01$cluster, ground_truth_km01),
purity = purity(km01$cluster, ground_truth_km01)
)
)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE)),
#entropy = entropy(km01$cluster, ground_truth_km01),
purity = purity(km01$cluster, ground_truth_km01)
)
)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE)),
entropy = entropy(km01$cluster, ground_truth_km01),
#purity = purity(km01$cluster, ground_truth_km01)
)
)
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE)),
#entropy = entropy(km01$cluster, ground_truth_km01),
#purity = purity(km01$cluster, ground_truth_km01)
)
)
ground_truth_km01 <- cases_cleaned %>% select(confirmed_cases_P1000,county_name)
ground_truth_km01 <- ground_truth_km01 %>% filter(county_name != "Noble County")
d_km01 <- dist(subset01_to_cluster %>% select(-county_name))
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(d_km01,
km01$cluster,
ground_truth_km01,
compareonly = TRUE)),
#entropy = entropy(km01$cluster, ground_truth_km01),
#purity = purity(km01$cluster, ground_truth_km01)
)
)
print(ground_truth_km01)
print(km01$cluster)
print(d_km01)
print(type(d_km01))
print(typeof(d_km01))
r <- rbind(
kmeans_sub01 = c(
unlist(fpc::cluster.stats(as.integer(d_km01),
as.integer(km01$cluster),
ground_truth_km01,
compareonly = TRUE)),
#entropy = entropy(km01$cluster, ground_truth_km01),
#purity = purity(km01$cluster, ground_truth_km01)
)
)
