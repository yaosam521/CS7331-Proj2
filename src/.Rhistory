oh_covid_time <- read_excel("Documents/School/Spring 23/Data Mining/CS7331-Proj1/oh-covid-time.csv")
load("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/oh-covid-time.csv")
library(readr)
oh_covid_time <- read_csv("Documents/School/Spring 23/Data Mining/CS7331-Proj1/oh-covid-time.csv")
View(oh_covid_time)
cases_franklin <- cases_oh %>% filter(county == "Franklin County")
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
cases_oh <- read_csv("Documents/School/Spring 23/Data Mining/CS7331-Proj1/oh-covid-time.csv")
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_line()
library("tidyverse")
cases_oh <- read_csv("Documents/School/Spring 23/Data Mining/CS7331-Proj1/oh-covid-time.csv")
cases_franklin <- cases_oh %>% filter(county == "Franklin County")
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_line()
library("tidyverse")
cases_oh <- read_csv("Documents/School/Spring 23/Data Mining/CS7331-Proj1/oh-covid-time.csv")
cases_franklin <- cases_oh %>% filter(county_name == "Franklin County")
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_line()
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_bar()
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_col(date, confirmed_cases)
ggplot(cases_franklin) + geom_col(aes(date, confirmed_cases))
ggplot(cases_franklin %>% filter(date > "3/20/2020")) + geom_col(aes(date, confirmed_cases))
cases_franklin %>% filter(date > "1/1/2023")
cases_franklin %>% filter(date > "2023-01-01")
cases_franklin$date <- as.Date(cases_franklin$date)
cases_franklin$date <- as.Date(cases_franklin$date, format="%Y-%m-%d")
cases_franklin$date
cases_franklin$date <- as.Date(cases_franklin$date, format="%d/%m/%Y")
cases_franklin$date
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
cases_franklin$date
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
cases_franklin$date
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
cases_franklin$date
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
source("~/Documents/School/Spring 23/Data Mining/CS7331-Proj1/testR.R")
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_line(color="red")
ggplot(cases_franklin, aes(date, delta_confirmed)) + geom_line(color="red")
cases_oh
cases_franklin = filter(cases_oh, county_name == "Franklin County")
cases_franklin$date <- as.Date(cases_franklin$date, format="%m/%d/%y")
cases_franklin
ggplot(cases_franklin %>% filter(date > '2020-03-01' & date < '2020-03-20'), aes(date, confirmed_cases)) + geom_col()
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_line(color="red")
ggplot(cases_franklin %>% filter(date < '2021-01-01'), aes(date, confirmed_cases)) + geom_line(color="red")
ggplot(cases_franklin, aes(date, delta_confirmed)) + geom_col()
ggplot(cases_franklin %>% filter(date > "2020-01-01"), aes(date, delta_confirmed)) + geom_col()
ggplot(cases_franklin %>% filter(date > "2020-01-02"), aes(date, delta_confirmed)) + geom_col()
ggplot(cases_franklin, aes(date, delta_confirmed)) + geom_col()
clear
cls
mobility_report <- read_csv("Global_Mobility_Report.csv")
summary(mobility_report)
mobility_franklin <- mobility_report %>% filter(sub_region_1=="Ohio" & sub_region_2=="Franklin County")
mobility_franklin <- mobility_report %>% filter(sub_region_1=="Ohio" & sub_region_2=="Franklin County")
dim(mobility_franklin)
mobility_franklin <- mobility_report %>% filter(sub_region_1=="Ohio" & sub_region_2=="Franklin County")
summary(mobility_franklin)
ggplot(mobility_franklin, aes(date, retail_and_recreation_percent_change_from_baseline)) + geom_line()
ggplot(mobility_franklin, aes(date, parks_percent_change_from_baseline)) + geom_line()
ggplot(mobility_franklin, aes(date, grocery_and_pharmacy_percent_change_from_baseline)) + geom_line()
ggplot(mobility_franklin, aes(date, workplaces_percent_change_from_baseline)) + geom_line()
ggplot(mobility_franklin, aes(date, transit_stations_percent_change_from_baseline)) + geom_line()
ggplot(mobility_franklin, aes(date, retail_and_recreation_percent_change_from_baseline)) + geom_line() + geom_smooth()
ggplot(mobility_franklin, aes(date, parks_percent_change_from_baseline)) + geom_line() + geom_smooth()
ggplot(mobility_franklin, aes(date, grocery_and_pharmacy_percent_change_from_baseline)) + geom_line() + geom_smooth()
ggplot(mobility_franklin, aes(date, workplaces_percent_change_from_baseline)) + geom_line() + geom_smooth()
ggplot(mobility_franklin, aes(date, transit_stations_percent_change_from_baseline)) + geom_line() + geom_smooth()
cases_oh <- read_csv("oh-covid-time.csv")
summary(mobility_franklin)
summary(mobility_franklin$date)
ggplot(cases_franklin %>% filter(date >= "2020-02-15" & date <= "2021-01-22")) + geom_line()
ggplot(cases_franklin %>% filter(date >= "2020-02-15" & date <= "2021-01-22"), aes(date, delta_confirmed)) + geom_line()
ggplot(mobility_franklin, aes(date, transit_stations_percent_change_from_baseline)) + geom_line() + geom_smooth()
summary(cases_franklin$date)
mobility_report <- read_csv("Global_Mobility_Report.csv")
library("tidyverse")
mobility_report <- read_csv("Global_Mobility_Report.csv")
summary(mobility_report)
library("tidyverse")
cases_oh <- read_csv("oh-covid-time.csv")
cases_oh
cases_franklin = filter(cases_oh, county_name == "Franklin County")
cases_franklin$date <- as.Date(cases_franklin$date, format="%m/%d/%y")
cases_franklin
ggplot(cases_franklin %>% filter(date > '2020-03-01' & date < '2020-03-20'), aes(date, confirmed_cases)) + geom_col()
ggplot(cases_franklin, aes(date, confirmed_cases)) + geom_line(color="red")
ggplot(cases_franklin, aes(date, delta_confirmed)) + geom_col()
ggplot(cases_franklin, aes(date, delta_confirmed)) + geom_col(color="red")
library("tidyverse")
cases_oh <- read_csv("oh-covid-time.csv")
cases_oh
cases_franklin = filter(cases_oh, county_name == "Franklin County")
cases_franklin$date <- as.Date(cases_franklin$date, format="%m/%d/%y")
cases_franklin
ggplot(cases_franklin, aes(date, deaths)) + geom_line(color="black")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
source("~/Documents/School/Spring 23/Data Mining/Proj-2/Proj_2.R")
## Step I-01: Loading the Dataset ----------------------------------------------------
#load the csv file/ check how many missing values do we have
library("tidyverse")
library("ggrepel")
library("DT")
library("NbClust")
library("dbscan")
cases <- read_csv("../data/Ohio Covid 03-05 + Census 2020-5yrs + Geo Boundaries.csv")
cases_cleaned
rm(cases, cases_filtered)
## Step I-03:  Data visualization [deaths and detected maps] -----------------------
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
cases_OH <- cases_cleaned %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
counties_OH_clust <- counties_OH %>% left_join(cases_OH)
rm(counties,counties_OH,cases_OH)
deaths_map <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = deaths_P1000)) +
coord_quickmap() +
scale_fill_continuous(type = "viridis") +
labs(title = "Deaths in Ohio State", fill = "Deaths per 1000")
cases_map <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = confirmed_cases_P1000)) +
coord_quickmap() +
scale_fill_continuous(type = "viridis") +
labs(title = "Cases in Ohio State", fill = "Cases per 1000")
cowplot::plot_grid(deaths_map, cases_map, nrow = 1, ncol = 2)
rm(cases_map, deaths_map)
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
summary(subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
summary(subset02_to_cluster)
# 2. perform a PCA analysis and remove outliers ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# a- subset 01:
PCA <- subset01_to_cluster %>% select(-county_name) %>% prcomp()
PCA <- as_tibble(PCA$x)  %>% add_column(county_name = cases_cleaned$county_name)
lof <- lof(as_tibble(PCA$PC1,PCA$PC2), minPts= 10)
ggplot(PCA %>% add_column(lof = lof), aes(PC1, PC2, color = lof)) +
geom_point() + scale_color_gradient(low = "gray", high = "red")+
geom_text_repel(aes(label = county_name), vjust = -1)
ggplot(PCA %>% add_column(outlier = lof >= 5), aes(PC1, PC2, color = outlier)) +
geom_point()+
geom_text_repel(aes(label = county_name), vjust = -1)
setwd("~/Documents/School/Spring 23/Data Mining/Proj-2/CS7331-Proj2/src")
## Step I-01: Loading the Dataset ----------------------------------------------------
#load the csv file/ check how many missing values do we have
library("tidyverse")
## Step I-01: Loading the Dataset ----------------------------------------------------
#load the csv file/ check how many missing values do we have
library("tidyverse")
library("ggrepel")
library("DT")
library("NbClust")
library("dbscan")
cases <- read_csv("../data/Ohio Covid 03-05 + Census 2020-5yrs + Geo Boundaries.csv")
cases <- cases %>% mutate_if(is.character, factor)
cases
# check for NA values
is.na(cases) %>% sum()
## Step I-02: Aggregation, Normalization and Selection -----------------------------
cases_filtered <- cases %>% mutate(
female_under_40_ratio= (female_under_5 +
female_5_to_9 +
female_10_to_14 +
female_15_to_17 +
female_18_to_19 +
female_20 +
female_21 +
female_22_to_24 +
female_25_to_29 +
female_30_to_34 +
female_35_to_39) / total_pop,
female_pop_P100=female_pop/total_pop*100,
male_under_40_ratio= (male_under_5 +
male_5_to_9 +
male_10_to_14 +
male_15_to_17 +
male_18_to_19 +
male_20 +
male_21 +
male_22_to_24 +
male_25_to_29 +
male_30_to_34 +
male_35_to_39) / total_pop,
male_pop_P100=male_pop/total_pop*100,
asian_pop_P1000=asian_pop/total_pop*1000,
black_pop_P1000=black_pop/total_pop*1000,
hispanic_pop_P1000=hispanic_pop/total_pop*1000,
deaths_P1000 = deaths/total_pop*1000,
confirmed_cases_P1000= confirmed_cases/total_pop*1000,
walked_to_work_P1000 = walked_to_work/total_pop*1000,
commuters_by_public_transportation_P1000 = commuters_by_public_transportation/total_pop*1000,
commuters_by_carpool_P1000 = commuters_by_carpool/total_pop*1000,
commuters_drove_alone_P1000 = commuters_drove_alone/total_pop*1000,
pop_density_Pkm= total_pop * 10^6 /area_land_meters
)
cases_cleaned <- cases_filtered %>% select(county_name,
# Ground truth
confirmed_cases_P1000,
deaths_P1000,
# first Subset
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita,
# Second Subset
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income,
)
# check for NA values
is.na(cases_cleaned) %>% sum()
cases_cleaned
rm(cases, cases_filtered)
## Step I-03:  Data visualization [deaths and detected maps] -----------------------
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
cases_OH <- cases_cleaned %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
counties_OH_clust <- counties_OH %>% left_join(cases_OH)
rm(counties,counties_OH,cases_OH)
deaths_map <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = deaths_P1000)) +
coord_quickmap() +
scale_fill_continuous(type = "viridis") +
labs(title = "Deaths in Ohio State", fill = "Deaths per 1000")
cases_map <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = confirmed_cases_P1000)) +
coord_quickmap() +
scale_fill_continuous(type = "viridis") +
labs(title = "Cases in Ohio State", fill = "Cases per 1000")
cowplot::plot_grid(deaths_map, cases_map, nrow = 1, ncol = 2)
rm(cases_map, deaths_map)
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
summary(subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
summary(subset02_to_cluster)
# 2. perform a PCA analysis and remove outliers ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# a- subset 01:
PCA <- subset01_to_cluster %>% select(-county_name) %>% prcomp()
PCA <- as_tibble(PCA$x)  %>% add_column(county_name = cases_cleaned$county_name)
lof <- lof(as_tibble(PCA$PC1,PCA$PC2), minPts= 10)
ggplot(PCA %>% add_column(lof = lof), aes(PC1, PC2, color = lof)) +
geom_point() + scale_color_gradient(low = "gray", high = "red")+
geom_text_repel(aes(label = county_name), vjust = -1)
ggplot(PCA %>% add_column(outlier = lof >= 5), aes(PC1, PC2, color = outlier)) +
geom_point()+
geom_text_repel(aes(label = county_name), vjust = -1)
subset01_to_cluster <- subset01_to_cluster %>% filter(lof < 5)
# b- subset 02:
PCA <- subset02_to_cluster %>% select(-county_name) %>% prcomp()
PCA <- as_tibble(PCA$x)  %>% add_column(county_name = cases_cleaned$county_name)
lof <- lof(as_tibble(PCA$PC1,PCA$PC2), minPts= 10)
ggplot(PCA %>% add_column(lof = lof), aes(PC1, PC2, color = lof)) +
geom_point() + scale_color_gradient(low = "gray", high = "red")+
geom_text_repel(aes(label = county_name), vjust = -1)
ggplot(PCA %>% add_column(outlier = lof >= 1.75), aes(PC1, PC2, color = outlier)) +
geom_point()+
geom_text_repel(aes(label = county_name), vjust = -1)
subset02_to_cluster <- subset02_to_cluster %>% filter(lof < 1.75)
rm(PCA, lof)
# 1- find the number of clusters
# A- Subset 01:
# A-1-1 Elbow Method: Within-Cluster Sum of Squares
set.seed(1234)
ks <- 2:10
WCSS <- sapply(ks, FUN = function(k) {
kmeans(subset01_to_cluster %>% select(-county_name), centers = k, nstart = 1000)$tot.withinss
})
WCSS_viz <- ggplot(as_tibble(ks, WCSS), aes(ks, WCSS)) + geom_line() +
geom_vline(xintercept = 8, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
# A-1-2 Average Silhouette Width
d <- dist(subset01_to_cluster %>% select(-county_name))
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, kmeans(subset01_to_cluster %>% select(-county_name), centers=k, nstart = 1000)$cluster)$avg.silwidth
})
ASW_viz <- ggplot(as_tibble(ks, ASW), aes(ks, ASW)) + geom_line() +
geom_vline(xintercept = 8, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
cowplot::plot_grid(WCSS_viz, ASW_viz, nrow = 1, ncol = 2)
k01=7
km01=kmeans(subset01_to_cluster %>% select(-county_name), centers = k01, nstart = 1000)
# B- Subset 02:
# B-1-1 Elbow Method: Within-Cluster Sum of Squares
set.seed(1234)
ks <- 2:20
WCSS <- sapply(ks, FUN = function(k) {
kmeans(subset02_to_cluster %>% select(-county_name), centers = k, nstart = 1000)$tot.withinss
})
WCSS_viz <- ggplot(as_tibble(ks, WCSS), aes(ks, WCSS)) + geom_line() +
geom_vline(xintercept = 9, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
# A-1-2 Average Silhouette Width
d <- dist(subset02_to_cluster %>% select(-county_name))
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d, kmeans(subset02_to_cluster %>% select(-county_name), centers=k, nstart = 1000)$cluster)$avg.silwidth
})
ASW_viz <- ggplot(as_tibble(ks, ASW), aes(ks, ASW)) + geom_line() +
geom_vline(xintercept = 9, color = "red", linetype = 2)+
geom_vline(xintercept = 7, color = "blue", linetype = 2)
cowplot::plot_grid(WCSS_viz, ASW_viz, nrow = 1, ncol = 2)
k02=9
km02=kmeans(subset02_to_cluster %>% select(-county_name), centers = k02, nstart = 1000)
# displaying details of the cluster:
ggplot(pivot_longer(as_tibble(km01$centers,  rownames = "cluster"),
cols = colnames(km01$centers)),
aes(y = name, x = value)) +
geom_bar(stat = "identity") +
facet_grid(rows = vars(cluster))
ggplot(pivot_longer(as_tibble(km02$centers,  rownames = "cluster"),
cols = colnames(km02$centers)),
aes(y = name, x = value)) +
geom_bar(stat = "identity") +
facet_grid(rows = vars(cluster))
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
cases_OH <- subset01_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(km01$cluster)))
km01_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Clusters", subtitle = "Kmeans [Subset 01]")
cases_OH <- subset02_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(km02$cluster)))
km02_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Clusters", subtitle = "Kmeans [Subset 02]")
cowplot::plot_grid(km01_viz, km02_viz, nrow = 1, ncol = 2)
## Step 1: Add Outliers Back in. We don't need to account for outliers in Hierarchical Clustering
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset01_to_cluster <- as.data.frame(subset01_to_cluster)
rownames(df_subset01_to_cluster) <- df_subset01_to_cluster$county_name
df_subset01_to_cluster <- df_subset01_to_cluster[,1:9]
head(df_subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset02_to_cluster <- as.data.frame(subset02_to_cluster)
rownames(df_subset02_to_cluster) <- df_subset02_to_cluster$county_name
df_subset02_to_cluster <- df_subset02_to_cluster[,1:6]
head(df_subset02_to_cluster)
#Step 2: Perform the Clusters --------------------------------------------------
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
ggdendrogram(hc_1_complete,
rotate = TRUE,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Complete - Subset 01")
d_h_2 <- dist(df_subset02_to_cluster)
hc_2_complete <- hclust(d_h_2, method='complete')
ggdendrogram(hc_2_complete,
rotate = TRUE,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Complete - Subset 02")
# Ward's Method
d_h_ward <- dist(df_subset01_to_cluster)
hc_1_wards <- hclust(d_h, method='ward.D2')
ggdendrogram(hc_1_wards,
rotate = TRUE,
size = 4,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Ward's - Subset 01")
d_h_2_ward <- dist(df_subset02_to_cluster)
hc_2_wards <- hclust(d_h_2, method='ward.D2')
ggdendrogram(hc_2_wards,
rotate = TRUE,
size = 4,
theme_dendro = FALSE,
color = "red") +
labs(title="Hierarchical Clusters", subtitle = "Ward's - Subset 02")
#-------------------------------------------------------------------------------
ks <- 2:20
ASW <- sapply(ks, FUN=function(k) {
fpc::cluster.stats(d_h, hclust(d_h, method='complete')$cluster)$avg.silwidth
})
#-------------------------------------------------------------------------------
ASW <- sapply(FUN=function(k) {
fpc::cluster.stats(d_h, hclust(d_h, method='complete')$cluster)$avg.silwidth
})
#-------------------------------------------------------------------------------
ASW <- sapply(FUN=function() {
fpc::cluster.stats(d_h, hclust(d_h, method='complete')$cluster)$avg.silwidth
})
#-------------------------------------------------------------------------------
ASW <- sapply(FUN=function() {
fpc::cluster.stats(d_h, hclust(d_h, method='complete')$cluster)$avg.silwidth
})
#-------------------------------------------------------------------------------
fpc::cluster.stats(d_h, hclust(d_h, method='complete')$cluster)$avg.silwidth
#-------------------------------------------------------------------------------
fviz_nbclust(df_subset01_to_cluster, FUN = hcut, method = "silhouette")
#-------------------------------------------------------------------------------
library(factoextra)
fviz_nbclust(df_subset01_to_cluster, FUN = hcut, method = "silhouette")
fviz_nbclust(df_subset02_to_cluster, FUN = hcut, method = "silhouette")
fviz_nbclust(df_subset01_to_cluster, FUN = hcut, method = "wcss")
fviz_nbclust(df_subset01_to_cluster, FUN = hcut, method = "wss")
fviz_nbclust(df_subset02_to_cluster, FUN = hcut, method = "wss")
fviz_nbclust(df_subset01_to_cluster, FUN = hcut, method = "gap_stats")
fviz_nbclust(df_subset01_to_cluster, FUN = hcut, method = "gap_stat")
fviz_nbclust(df_subset02_to_cluster, FUN = hcut, method = "gap_stat")
