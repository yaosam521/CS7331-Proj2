subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset02_to_cluster <- as.data.frame(subset02_to_cluster)
rownames(df_subset02_to_cluster) <- df_subset02_to_cluster$county_name
head(df_subset02_to_cluster)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
plot(hc_1_complete, hang = -1)
d_h_2 <- dist(df_subset02_to_cluster)
hc_2_complete <- hclust(d_h_2, method='complete')
plot(hc_2_complete, hang = -1)
# Ward's Method
d_h_ward <- dist(df_subset01_to_cluster)
hc_1_wards <- hclust(d_h, method='ward.D2')
plot(hc_1_wards, hang = -1)
d_h_2_ward <- dist(df_subset02_to_cluster)
hc_2_wards <- hclust(d_h_2, method='ward.D2')
plot(hc_2_wards, hang = -1)
library(factoextra)
#Cluster Numbers are based on values extracted from k-means
fviz_dend(hc_1_complete,k=7,show_labels = TRUE, main ="Hierarchical, Complete, Subset 1")
fviz_dend(hc_2_complete,k=9,show_labels = TRUE, main ="Hierarchical, Complete, Subset 2")
fviz_dend(hc_1_wards,k=7,show_labels = TRUE, main ="Hierarchical, Wards, Subset 1")
fviz_dend(hc_2_wards,k=9,show_labels = TRUE, main ="Hierarchical, Wards, Subset 2")
cases_OH <- df_subset01_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
#Subset 1
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
clusters <- cutree(hc_1_complete, k = 7)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc01_c_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Complete [Subset 01]")
#Subset 2
clusters <- cutree(hc_2_complete, k = 9)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc02_c_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Complete [Subset 02]")
cowplot::plot_grid(hc01_c_viz, hc02_c_viz, nrow = 1, ncol = 2)
#Plotting Ward's Method --------------------------------------------------------
#Subset 01
clusters <- cutree(hc_1_wards, k = 7)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc01_w_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
coord_flip() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Ward's [Subset 01]")
clusters <- cutree(hc_2_wards, k = 9)
#Subset 2
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc02_w_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Ward's [Subset 02]")
cowplot::plot_grid(hc01_w_viz, hc02_w_viz, nrow = 1, ncol = 2)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
plot(hc_1_complete, hang = -1, horiz=T)
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "tomato")
#Step 2: Perform the Clusters
library(ggdendro)
#Step 2: Perform the Clusters
library(ggdendro)
#Step 2: Perform the Clusters
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
plot(hc_1_complete, hang = -1, horiz=T)
plot(hc_1_complete, hang = -1)
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "tomato")
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
#Step 2: Perform the Clusters
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
## Step 1: Add Outliers Back in. We don't need to account for outliers in Hierarchical Clustering
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
## Step 1: Add Outliers Back in. We don't need to account for outliers in Hierarchical Clustering
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset01_to_cluster <- as.data.frame(subset01_to_cluster)
rownames(df_subset01_to_cluster) <- df_subset01_to_cluster$county_name
df_subset01_to_cluster <- df_subset01_to_cluster[,1:9]
head(df_subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset02_to_cluster <- as.data.frame(subset02_to_cluster)
rownames(df_subset02_to_cluster) <- df_subset02_to_cluster$county_name
df_subset02_to_cluster <- df_subset02_to_cluster[,1:6]
head(df_subset02_to_cluster)
#Step 2: Perform the Clusters
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
View(df_subset_01_to_cluster)
View(df_subset01_to_cluster)
View(df_subset02_to_cluster)
View(df_subset_01_to_cluster)
## Step 1: Add Outliers Back in. We don't need to account for outliers in Hierarchical Clustering
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset01_to_cluster <- as.data.frame(subset01_to_cluster)
rownames(df_subset01_to_cluster) <- df_subset01_to_cluster$county_name
df_subset01_to_cluster <- df_subset01_to_cluster[,1:9]
head(df_subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset02_to_cluster <- as.data.frame(subset02_to_cluster)
rownames(df_subset02_to_cluster) <- df_subset02_to_cluster$county_name
df_subset02_to_cluster <- df_subset02_to_cluster[,1:6]
head(df_subset02_to_cluster)
#Step 2: Perform the Clusters
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 88, B = 500)
dat <- data.table(hcluster$Tab)
print(hcluster)
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 88, B = 500)
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 7, B = 500)
print(hcluster)
dat <- data.table(hcluster$Tab)
dat[, k := .I]
# visualize gap statistic
p <- ggplot(dat, aes(k, gap)) + geom_line() + geom_point(size = 3) +
geom_errorbar(aes(ymax = gap + SE.sim, ymin = gap - SE.sim), width = 0.25) +
ggtitle("Clustering Results") +
labs(x = "Number of Clusters", y = "Gap Statistic") +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
dat <- data.table(hcluster)
dat <- data.frame(hcluster)
dat <- hcluster
dat[, k := .I]
# visualize gap statistic
p <- ggplot(hcluster, aes(k, gap)) + geom_line() + geom_point(size = 3) +
geom_errorbar(aes(ymax = gap + SE.sim, ymin = gap - SE.sim), width = 0.25) +
ggtitle("Clustering Results") +
labs(x = "Number of Clusters", y = "Gap Statistic") +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
# visualize gap statistic
p <- ggplot(dat, aes(k, gap)) + geom_line() + geom_point(size = 3) +
geom_errorbar(aes(ymax = gap + SE.sim, ymin = gap - SE.sim), width = 0.25) +
ggtitle("Clustering Results") +
labs(x = "Number of Clusters", y = "Gap Statistic") +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 7, B = 500)
print(hcluster)
dat <- data.frame(hcluster)
dat <- data.frame(hcluster$Tab)
# visualize gap statistic
p <- ggplot(dat, aes(k, gap)) + geom_line() + geom_point(size = 3) +
geom_errorbar(aes(ymax = gap + SE.sim, ymin = gap - SE.sim), width = 0.25) +
ggtitle("Clustering Results") +
labs(x = "Number of Clusters", y = "Gap Statistic") +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
# visualize gap statistic
ggplot(dat, aes(k, gap)) + geom_line() + geom_point(size = 3) +
geom_errorbar(aes(ymax = gap + SE.sim, ymin = gap - SE.sim), width = 0.25) +
ggtitle("Clustering Results") +
labs(x = "Number of Clusters", y = "Gap Statistic") +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
# visualize gap statistic
p <- ggplot(dat, aes(k, gap)) + geom_line() + geom_point(size = 3) +
geom_errorbar(aes(ymax = gap + SE.sim, ymin = gap - SE.sim), width = 0.25) +
ggtitle("Clustering Results") +
labs(x = "Number of Clusters", y = "Gap Statistic") +
theme(plot.title = element_text(size = 16, hjust = 0.5, face = "bold"),
axis.title = element_text(size = 12, face = "bold"))
print(p)
dat[, k := .I]
dat[, k = .I]
# visualize gap statistic
fviz_gap_stat(h_cluster)
# visualize gap statistic
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 7, B = 50)
# visualize gap statistic
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 100, B = 50)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 87, B = 50)
# visualize gap statistic
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 50)
# visualize gap statistic
fviz_gap_stat(hcluster)
# visualize gap statistic
fviz_gap_stat(hcluster, linecolor="red")
# visualize gap statistic
fviz_gap_stat(hcluster)
## Step 1: Add Outliers Back in. We don't need to account for outliers in Hierarchical Clustering
subset01_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
female_pop_P100,
male_pop_P100,
female_under_40_ratio,
male_under_40_ratio,
# habits and interactions
walked_to_work_P1000,
commuters_by_public_transportation_P1000,
commuters_by_carpool_P1000,
commuters_drove_alone_P1000,
# financial related
income_per_capita
))) %>% scale() %>% as_tibble()
subset01_to_cluster <- subset01_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset01_to_cluster <- as.data.frame(subset01_to_cluster)
rownames(df_subset01_to_cluster) <- df_subset01_to_cluster$county_name
df_subset01_to_cluster <- df_subset01_to_cluster[,1:9]
head(df_subset01_to_cluster)
subset02_to_cluster <- subset(cases_cleaned, select = ( c(
# gender/Ethnicity and age
asian_pop_P1000,
black_pop_P1000,
hispanic_pop_P1000,
median_age,
# habits and interactions
pop_density_Pkm,
# financial related
median_income
))) %>% scale() %>% as_tibble()
subset02_to_cluster <- subset02_to_cluster %>% add_column(county_name = cases_cleaned$county_name)
df_subset02_to_cluster <- as.data.frame(subset02_to_cluster)
rownames(df_subset02_to_cluster) <- df_subset02_to_cluster$county_name
df_subset02_to_cluster <- df_subset02_to_cluster[,1:6]
head(df_subset02_to_cluster)
#Step 2: Perform the Clusters
library(ggdendro)
# Complete Method
d_h <- dist(df_subset01_to_cluster)
hc_1_complete <- hclust(d_h, method='complete')
ggdendrogram(hc_1_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
d_h_2 <- dist(df_subset02_to_cluster)
hc_2_complete <- hclust(d_h_2, method='complete')
plot(hc_2_complete, hang = -1)
ggdendrogram(hc_2_complete, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
# Ward's Method
d_h_ward <- dist(df_subset01_to_cluster)
hc_1_wards <- hclust(d_h, method='ward.D2')
plot(hc_1_wards, hang = -1)
ggdendrogram(hc_1_wards, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
d_h_2_ward <- dist(df_subset02_to_cluster)
hc_2_wards <- hclust(d_h_2, method='ward.D2')
plot(hc_2_wards, hang = -1)
ggdendrogram(hc_2_wards, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 50)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, K.max = 10, B = 50)
fviz_gap_stat(hcluster)
hcluster = clusGap(hc_1_wards, FUN = hcut, K.max = 10, B = 50)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 87, B = 50)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, K.max = 87, B = 50)
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 50)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, K.max = 10, B = 50)
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 500)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, K.max = 10, B = 500)
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut(df_subset01_to_cluster), K.max = 10, B = 500)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 1000)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, K.max = 10, B = 1000)
fviz_gap_stat(hcluster)
# Ward's Method
d_h_ward <- dist(subset01_to_cluster)
hc_1_wards <- hclust(d_h, method='ward.D2')
# Ward's Method
d_h_ward <- dist(df_subset01_to_cluster)
hc_1_wards <- hclust(d_h, method='ward.D2')
plot(hc_1_wards, hang = -1)
ggdendrogram(hc_1_wards, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
d_h_2_ward <- dist(df_subset02_to_cluster)
hc_2_wards <- hclust(d_h_2, method='ward.D2')
plot(hc_2_wards, hang = -1)
ggdendrogram(hc_2_wards, rotate = TRUE, size = 4, theme_dendro = FALSE, color = "red")
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(subset01_to_cluster, FUN = hcut, K.max = 10, B = 1000)
fviz_gap_stat(hcluster)
hcluster = clusGap(subset02_to_cluster, FUN = hcut, K.max = 10, B = 1000)
fviz_gap_stat(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 1000)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, K.max = 10, B = 500)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, K.max = 10, B = 500)
fviz_gap_stat(hcluster)
hclust <- nbClust(data=df_subset01_to_cluster)
hclust <- NbClust(data=df_subset01_to_cluster)
hclust <- NbClust(data=df_subset01_to_cluster,method="complete")
hclust <- NbClust(data=df_subset01_to_cluster,method="complete",index="silhouette")
print(hclust)
hclust <- NbClust(data=df_subset02_to_cluster,method="complete",index="silhouette")
print(hclust)
hclust <- NbClust(data=df_subset01_to_cluster,method="complete",index="silhouette")
print(hclust)
hclust <- NbClust(data=df_subset02_to_cluster,method="complete",index="silhouette")
print(hclust)
hclust <- NbClust(data=df_subset01_to_cluster,method="ward.D2",index="silhouette")
print(hclust)
hclust <- NbClust(data=df_subset02_to_cluster,method="ward.D2",index="silhouette")
print(hclust)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, nstart=10, K.max = 10)
fviz_gap_stat(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, nstart=10,K.max = 10)
fviz_gap_stat(hcluster)
plot(hcluster)
#Code Derived from "https://uc-r.github.io/kmeans_clustering#gap"
#Get Cluster Gap Statistics
hcluster = clusGap(df_subset01_to_cluster, FUN = hcut, nstart=10, K.max = 10)
plot(hcluster)
hcluster = clusGap(df_subset02_to_cluster, FUN = hcut, nstart=10,K.max = 10)
plot(hcluster)
# Decided on NbClust
hclust <- NbClust(data=df_subset01_to_cluster,method="complete",index="silhouette")
plot(hclust)
print(hclust)
# Decided on NbClust
hclust <- NbClust(data=df_subset01_to_cluster,method="complete",index="silhouette")
print(hclust$Best.nc)
hclust <- NbClust(data=df_subset02_to_cluster,method="complete",index="silhouette")
print(hclust$Best.nc)
hclust <- NbClust(data=df_subset01_to_cluster,method="ward.D2",index="silhouette")
print(hclust$Best.nc)
hclust <- NbClust(data=df_subset02_to_cluster,method="ward.D2",index="silhouette")
print(hclust$Best.nc)
#Cluster Numbers are based on values extracted from k-means
fviz_dend(hc_1_complete,k=2,show_labels = TRUE, main ="Hierarchical, Complete, Subset 1")
fviz_dend(hc_2_complete,k=3,show_labels = TRUE, main ="Hierarchical, Complete, Subset 2")
fviz_dend(hc_1_wards,k=2,show_labels = TRUE, main ="Hierarchical, Wards, Subset 1")
fviz_dend(hc_2_wards,k=3,show_labels = TRUE, main ="Hierarchical, Wards, Subset 2")
cases_OH <- df_subset01_to_cluster %>% mutate(county = county_name %>%
str_to_lower() %>% str_replace('\\s+county\\s*$', ''))
#Subset 1
counties <- as_tibble(map_data("county"))
counties_OH <- counties %>% dplyr::filter(region == "ohio") %>%
rename(c(county = subregion))
clusters <- cutree(hc_1_complete, k = 2)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc01_c_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Complete [Subset 01]")
#Subset 2
clusters <- cutree(hc_2_complete, k = 3)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc02_c_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Complete [Subset 02]")
cowplot::plot_grid(hc01_c_viz, hc02_c_viz, nrow = 1, ncol = 2)
#Plotting Ward's Method --------------------------------------------------------
#Subset 01
clusters <- cutree(hc_1_wards, k = 2)
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc01_w_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Ward's [Subset 01]")
clusters <- cutree(hc_2_wards, k = 3)
#Subset 2
counties_OH_clust <- counties_OH %>% left_join(cases_OH %>%
add_column(cluster = factor(clusters)))
hc02_w_viz <- ggplot(counties_OH_clust, aes(long, lat)) +
geom_polygon(aes(group = group, fill = cluster)) +
coord_quickmap() +
scale_fill_viridis_d() +
theme_minimal()+
labs(title = "Hierarchical Clusters", subtitle = "Ward's [Subset 02]")
cowplot::plot_grid(hc01_w_viz, hc02_w_viz, nrow = 1, ncol = 2)
